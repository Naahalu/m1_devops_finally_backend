version: 2
jobs:
  install:
    docker:
      - image: circleci/python:3.6.4
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CACHE_VERSION }}
            - dependencies-
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install -r requirements/dev.txt
      - save_cache:
          paths:
            - ./venv
          key: dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CACHE_VERSION }}

  test:
    docker:
      - image: circleci/python:3.6.4
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: myUsr
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: somePwd
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CACHE_VERSION }}
            - dependencies-
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Run unit test
          command: |
            export CONDUIT_SECRET='something-really-secret'
            export FLASK_APP=/home/circleci/repo/autoapp.py
            export FLASK_DEBUG=1
            export DATABASE_URL=postgresql://myUsr:somePwd@localhost:5432/postgres
            . venv/bin/activate
            flask test

  build:
    docker:
      - image: circleci/python:3.6.4
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: myUsr
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: somePwd
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ checksum "requirements.txt" }}-{{ .Environment.CACHE_VERSION }}
            - dependencies-
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Migrate Database
          command: |
            export CONDUIT_SECRET='something-really-secret'
            export FLASK_APP=/home/circleci/repo/autoapp.py
            export FLASK_DEBUG=1
            export DATABASE_URL=postgresql://myUsr:somePwd@localhost:5432/postgres
            . venv/bin/activate
            flask db upgrade
            flask db migrate

  build_and_push_docker:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and push Docker image
          command: |
            docker login -u $DOCKER_LOGIN -p $DOCKER_PWD
            docker build --cache-from=app -t app:latest .
            docker tag app $DOCKER_LOGIN/medium-backend:$CIRCLE_BUILD_NUM
            docker tag app $DOCKER_LOGIN/medium-backend:latest
            docker push $DOCKER_LOGIN/medium-backend:$CIRCLE_BUILD_NUM
            docker push $DOCKER_LOGIN/medium-backend:latest

workflows:
  version: 2
  Build:
    jobs:
      - install
      - build:
          requires:
            - install
      - test:
          requires:
            - install
      - build_and_push_docker:
          requires:
            - test
          filters:
            branches:
              only: master
